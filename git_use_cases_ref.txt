Git is one of the widely used Distributed Version Control System (DVCS), and nowadays is the de-facto standard. Every developer's working copy is a full repository, and can contain whole project history.
Online are available a lot of GUI/tools/software/plugins: all of these tend to improve Git's usability, no matter if you are newbie or expert, however i recommend using Git by command line, because working with DVCS require you always control what's happening under the hood, and command line -when is well documented- is often best choice from this point of view.
Git official documentation is flawless (and man is my friend), but it's not same for online tutorials: they're often messy, getting lost into details. You can see plenty of devs searching around for solutions, trying randomly to adapt answers to their needs. That's why they sometimes opt for others solutions (like hg), and/or -worse- they just manually copy and backup project files, losing real advantages of VCS.
I wrote this short article because of that: in my experience, if you know a set of key-concepts, you can be productive fast, especially with a system like Git, born to make our life easier. My purpose is to build, little by little, a simple Git core-topics short list, where is described simply what is really needed in everyday life.
Mastering these concepts, everyone can be at ease in most -standard- cases, but remember: when you're working on source code, to be methodical is the best way of preventing disasters, especially if two (or more) people access same data/file(s). My best advice is to standardize working procedures, and create a consistent case system.
This is the list, written straight on. Where needed, i added a simple demo snippet. Feel free to suggest updates, revisions and additions:

# Add: after code changes, adding it to the index, means you are "proposing" changes, putting in the "staging area". With "add", from working directory, your updates go to the stage (Index)
$ git add git-*.sh

# Branch: i like to say that creating a branch, you're defining a "development task". It's simply used to work on new features. By default, Git puts you on a master branch, you create a new branch, and after working on it, new branch it's merged back with master.
$ git show-branch

# Checkout: Is used for switching between files, commits and branches, loading a previous saved "snapshot".  
$ git checkout master #branch
$ git checkout <commit> <file> #file
$ git checkout <commit> #commit, putting code in 'detached HEAD state'. Is like creating a new branch, you can checkout
$ git checkout -- <file> #discard changes in working tree, for input file

# Cloning: It mirrors full repository, creating a new -local- "instance".  
$ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux

# Conflicts: Calling merge, Git try to auto-merge all data, but it's not always possible. Sometimes it needs to manually "resolve" it, and adding it to the Index when you're done.
$ git merge fixes enhancements # merging two branches

# Commit: Index files in stage, when committed, are moved to HEAD. A commit is named by SHA1 hash, and is often defined as a "node" of a linked list. Each commit creates an object, linked to its commit-parent. If there's a commit with more parents, it's been clearly created by a merge.
$ edit hello.c
$ git rm goodbye.c
$ git add hello.c
$ git commit

# Diff: Show changes. Useful for file, can be also used for commits, branches and working directory inspections
$ git diff <edited_file> #typical usage
$ git diff HEAD^ HEAD #compare last commit with the previous one
$ git diff <branch> origin/<branch> #after a fetch, before pull, compare local branch w/ remote one 

# Downstream: Is a relative term, describing flows between a remote repo and your local repo, with "local" point of view. Is used when "getting" data from other repository.

# Fetch:  simply get new data from remote repo into local repo, without trying merge it in your workspace. You can fetch always fearless: as opposed to pull, no data modifications will occur.
$ git fetch origin
$ git diff master origin/master # here you can check what has been fetched
$ git merge # if new content fetched 

# HEAD: It's a pointer to the latest commit. So, at every commit, HEAD is updated. Referring to it, everything still happens locally: after a commit, we can say that "data are in the HEAD of our local working copy" 
$ git show-ref master #list references on master for local and remote repo

# Index: A staging area, where you put your updates after a "git add".

# Log: Every commit is logged and can be showed/formatted in thousands of different ways.
$ git log 

# Merge: Applying code updates from another branch, into your actual one (can be master).

# Origin: When cloning, Git set up the "default" remote name as origin. That is: the default name of the remote repository.
$ git remote show origin

# Pulling: Used for remote-to-local sync, copying remote changes into local repository. Pull integrates updates into your working dir, updating HEAD in current branch. That said, pull tries merging: it's used when you have-not uncommitted data.

# Pull request (PR): after pushing a new branch with an update to repository, you are ask for creating a "pull request" (eg. on Github or Bitbucket). Doing so, you're informing others about your work. Usually this means you'll join a thread w/ collaborators/reviewers, where topic is update effects evaluation and related changes.

# Pushing: Opposite of pulling, copies local changes to remote repository. Data in the HEAD is sent to remote repository.  

# Remote: Repository name, used as an alias of the full path URL. 
$ git remote -v

# Reset: Usually means "copying files from latest commit, into the stage". It's the "undo git add". Can be used for commit-undo too:
# 1 - ADD UNDO
$ edit                   <1>
$ git add frotz.c filfre.c
$ mailx                  <2>
$ git reset                <3>
$ git pull git://info.example.com/ nitfol <4>
# 2 - COMMIT UNDO
$ git reset --soft HEAD~1 #reset by 1 commit, keeping data in stage. 
$ git reset --hard HEAD~2 #reset cleaning stage too, coming back by 2 commits 

# rm: Remove files from working index. Instead of doing "rm" via shell, followed by "git add <removed_file>", it does all in one step.
$ git rm module_X/\*.c

# Stash: Used when you've to pull some relevant upstream updates that may conflicts with local source code version. You can stash your changes away, pull and then unstash:
$ git pull
 ...
file XYZ.c not up to date, cannot merge.
$ git stash
$ git pull
$ git stash pop

# Status: Showing working tree differences between Index and HEAD (what you put in stage, waiting for commit), Working directory and Index (source code edited, ready to be added on stage). 
$ git status

# Upstream: Is a relative term, describing flow between a remote repo and your local repo, with "remote" point of view. Very often we refer to the remote flows as "upstream" push and pulls.

# Working directory: Where files are stored. 



###########################################################################
On a daily basis, you'll following these steps:


# 1 - Fork the github repository
$ git clone https://github.com/foo/foo.git  # Change this to use your fork.
$ cd foo
$ git remote add upstream https://github.com/foo/foo.git
$ git fetch upstream
$ git checkout upstream/develop -b feature/great_feature
# code and test ...
$ git commit -m '[topic] .... blaaaah ....'
$ git push origin feature/great_feature
# 2 - Go to GitHub and open pull request. Join the thread, follow instructions and wait for merge


Last update - doc version: 2017-11-01 18:55

Ref: https://www.kernel.org/pub/software/scm/git/docs/
