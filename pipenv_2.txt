# First, create a shell in a virtual environment to isolate the development of this app. 
# This will create a virtual environment if one doesn’t already exist. Pipenv creates all your virtual environments in a default location
$ pipenv shell

# Now you can install the 3rd party packages you need, django and numpy
$ pipenv install django==2.0
$ pipenv install numpy

# Let’s say you also have some unit tests for this awesome application, and you want to use pytest for running them. 
# You don’t need pytest in production so you can specify that this dependency is only for development with the --dev argument
$ pipenv install pytest --dev

# Now you’ve got everything working in your local environment, and you’re ready to push it to production. You need to lock your environment so you can ensure you have the same one in production. This will create/update Pipfile.lock. You’ll never need to edit:
$ pipenv lock

# Now, you are in production, you get your code and Pipfile.lock. You should install the last successful environment recorded. 
# This ignore the Pipfile for installation and create the exact same environment you had when in the previous step (when you ran pipenv lock):
# This means you have deterministic builds, by taking a snapshot of all the versions of packages in an environment (like w/ pip freeze).
$ pipenv install --ignore-pipfile

# If another developer wants to update your code: he 1) get the code, 2) get the Pipfile, 3) use this command:
$ pipenv install --dev

# If you want to show a dependency graph, to understand your top-level dependencies and their sub-dependencies:
$ pipenv graph

# or you can reverse, showing sub-dependencies w/ parents requirements:
$ pipenv graph --reverse

# Run a command in the virtual environment without launching a shell:
$ pipenv run <insert command here>

# Check for security vulnerabilities + PEP 508 requs:
$ pipenv check

# Uninstall a package:
$ pipenv uninstall numpy

# Wipe all:
$ pipenv uninstall --all

# Find out where your virtual env is:
$ pipenv --venv

# Find out where your project home is:
$ pipenv --where



